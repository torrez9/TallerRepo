@using System.Security.Claims
@using System.Net.Http.Headers
@using Taller.Models
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="layout-container">
    <header class="navbar navbar-expand-lg navbar-dark bg-black px-3">
        <a class="navbar-brand" href="home">TallerMotos</a>

        <button class="navbar-toggler" type="button" @onclick="ToggleMenu">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse @(menuAbierto ? "show" : "")">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <NavLink class="nav-link" href="home" Match="NavLinkMatch.All">
                        <i class="bi bi-house-door-fill"></i> Inicio
                    </NavLink>
                </li>
                @if (isAuthenticated)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="NuevaCita">
                            <i class="bi bi-calendar-plus"></i> Citas
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="NuevoCliente">
                            <i class="bi bi-person-plus-fill"></i> Clientes
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="ListaCitas">
                            <i class="bi bi-list-check"></i> Citas Agendadas
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="CitasID">
                            <i class="bi bi-list-check"></i> Mis Citas
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="Notificaciones">
                            <i class="bi bi-list-check"></i> Notificaciones
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="perfil">
                            <i class="bi bi-person-circle"></i> Perfil
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" @onclick="CerrarSesion">
                            <i class="fas fa-sign-out-alt"></i> Cerrar Sesión
                        </a>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/">
                            <i class="fas fa-sign-in-alt"></i> Iniciar Sesión
                        </NavLink>
                    </li>
                }
            </ul>
        </div>
    </header>

    <main class="main-content">
        @Body
    </main>
</div>

@code {
    private bool menuAbierto = false;
    private string? nombreUsuario;
    private bool isAuthenticated = false;
    private Cliente? usuarioActual;

    protected override async Task OnInitializedAsync()
    {
        await VerificarAutenticacion();
        ((CustomAuthStateProvider)AuthStateProvider).AuthenticationStateChanged +=
            async _ => await VerificarAutenticacion();
    }

    private async Task VerificarAutenticacion()
    {
        try
        {
            var tieneToken = await JSRuntime.InvokeAsync<bool>("authManager.isLoggedIn");

            if (!tieneToken)
            {
                isAuthenticated = false;
                nombreUsuario = null;
                usuarioActual = null;
                StateHasChanged();
                return;
            }

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            isAuthenticated = user.Identity?.IsAuthenticated ?? false;

            if (isAuthenticated)
            {
                usuarioActual = await JSRuntime.InvokeAsync<Cliente>("authManager.getCurrentUser");

                if (usuarioActual == null)
                {
                    var token = await JSRuntime.InvokeAsync<string>("authManager.getAuthToken");
                    if (!string.IsNullOrEmpty(token))
                    {
                        var http = new HttpClient();
                        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

                        var response = await http.GetAsync($"{NavigationManager.BaseUri}api/profile/me");
                        if (response.IsSuccessStatusCode)
                        {
                            usuarioActual = await response.Content.ReadFromJsonAsync<Cliente>();
                            await JSRuntime.InvokeVoidAsync("authManager.updateUserData", usuarioActual);
                        }
                    }
                }

                nombreUsuario = usuarioActual?.Nombre ?? user.FindFirst(ClaimTypes.Name)?.Value ?? "Usuario";
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error al verificar autenticación: {ex.Message}");
            await CerrarSesion();
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task CerrarSesion()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("authManager.clearUserData");
            if (AuthStateProvider is CustomAuthStateProvider customProvider)
            {
                await customProvider.NotifyUserLogout();
            }
            isAuthenticated = false;
            nombreUsuario = null;
            usuarioActual = null;
            StateHasChanged();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error al cerrar sesión: {ex.Message}");
        }
    }

    private void ToggleMenu()
    {
        menuAbierto = !menuAbierto;
    }

    public class Cliente
    {
        public Cliente(string nombre)
        {
            Nombre = nombre;
        }

        public int IdCliente { get; set; }
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public string Telefono { get; set; }
        public string Correo { get; set; }
        public string Usuario { get; set; }
        public string Direccion { get; set; }
    }
}