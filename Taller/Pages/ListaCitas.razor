@page "/ListaCitas"
@inject HttpClient Http
@using Taller.Models
@inject IJSRuntime JSRuntime

<PageTitle>Citas Agendadas</PageTitle>

<div class="page-container">
    <div class="header-logo">
        <img src="images/logotuning.png" alt="Logo Taller" class="logo-img" />
        <h1>Citas Agendadas</h1>
    </div>

    <div class="appointments-table">
        <div class="stats-container">
            <div class="stat-card">
                <span class="stat-label">Total:</span>
                <span class="stat-value">@citas?.Count</span>
            </div>
            <div class="stat-card confirmadas">
                <span class="stat-label">Confirmadas:</span>
                <span class="stat-value">@confirmadas</span>
            </div>
            <div class="stat-card pendientes">
                <span class="stat-label">Pendientes:</span>
                <span class="stat-value">@pendientes</span>
            </div>
            <div class="stat-card canceladas">
                <span class="stat-label">Canceladas:</span>
                <span class="stat-value">@canceladas</span>
            </div>
        </div>

        <!-- BUSCADOR Y BOTONES DE EXPORTACIÓN -->
        <div class="search-export-container">
            @* <div class="search-box">
                <input type="text" class="search-input" placeholder="Buscar citas..." @bind="searchTerm" />
                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <button class="clear-search" @onclick="ClearSearch">
                        <i class="fas fa-times"></i>
                    </button>
                }
            </div> *@
            
            <div class="export-buttons">
                @* <button class="btn btn-success" @onclick="ExportarExcel">
                    <i class="fas fa-file-excel"></i> Exportar Gráficos a Excel
                </button> *@
                <button class="btn btn-danger" @onclick="ExportarPDF">
                    <i class="fas fa-file-pdf"></i> Exportar Gráficos a PDF
                </button>
            </div>
        </div>
        <!-- FIN BUSCADOR Y BOTONES -->

        @if (citas == null || clientes == null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-2">Cargando citas...</p>
            </div>
        }
        else if (!filteredCitas.Any())
        {
            <p class="text-center text-muted">No hay citas disponibles.</p>
        }
        else
        {
            <div class="charts-container">
                <div class="chart-card">
                    <h3>Estados de las Citas</h3>
                    <div class="chart-wrapper">
                        <canvas id="estadosChart" width="400" height="300"></canvas>
                    </div>
                </div>
                <div class="chart-card">
                    <h3>Citas por Mes</h3>
                    <div class="chart-wrapper">
                        <canvas id="citasMesChart" width="400" height="300"></canvas>
                    </div>
                </div>
                <div class="chart-card full-width">
                    <h3>Top 10 Clientes con más Citas</h3>
                    <div class="chart-wrapper">
                        <canvas id="clientesChart" width="800" height="400"></canvas>
                    </div>
                </div>
            </div>

            <div class="table-card">
                <h3>Top 10 Clientes con más Citas</h3>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Cliente</th>
                                <th>Total Citas</th>
                                <th>Confirmadas</th>
                                <th>Pendientes</th>
                                <th>Canceladas</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var cliente in topClientes)
                            {
                                <tr>
                                    <td>@cliente.Nombre</td>
                                    <td>@cliente.TotalCitas</td>
                                    <td>@cliente.CitasConfirmadas</td>
                                    <td>@cliente.CitasPendientes</td>
                                    <td>@cliente.CitasCanceladas</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="table-card">
                <h3>Listado Detallado de Citas</h3>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Cliente</th>
                                <th>Fecha de la Cita</th>
                                <th>Descripción</th>
                                <th>Estado</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var cita in filteredCitas)
                            {
                                var nombreCliente = clientes.FirstOrDefault(c => c.IdCliente == cita.IdCliente)?.Nombre ?? "Desconocido";
                                <tr>
                                    <td>@nombreCliente</td>
                                    <td>
                                        @{
                                            var fechaHora = cita.Hora.HasValue
                                                ? cita.FechaCita.ToDateTime(cita.Hora.Value)
                                                : cita.FechaCita.ToDateTime(TimeOnly.MinValue); // Hora por defecto 00:00
                                        }
                                        @fechaHora.ToString("dd/MM/yyyy HH:mm")
                                    </td>

                                    <td>@(string.IsNullOrEmpty(cita.Descripcion) ? "Sin descripción" : cita.Descripcion)</td>
                                    <td>
                                        @if (cita.Estado == "Confirmada")
                                        {
                                            <span class="badge-success">Confirmada</span>
                                        }
                                        else if (cita.Estado == "Pendiente")
                                        {
                                            <span class="badge-warning">Pendiente</span>
                                        }
                                        else if (cita.Estado == "Cancelada")
                                        {
                                            <span class="badge-error">Cancelada</span>
                                        }
                                        else
                                        {
                                            <span class="badge-secondary">@cita.Estado</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Cita>? citas;
    private List<Cita>? filteredCitas;
    private List<Cliente>? clientes;
    private List<ClienteCitas> topClientes = new List<ClienteCitas>();
    private DotNetObjectReference<ListaCitas>? objRef;
    private string searchTerm = string.Empty;

    // Variables para los gráficos
    private int confirmadas = 0;
    private int pendientes = 0;
    private int canceladas = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
        await CargarCitas();
        if (citas != null && clientes != null)
        {
            FiltrarCitas();
            CalcularTopClientes();
        }
    }

    private void CalcularTopClientes()
    {
        topClientes = clientes
            .Select(cliente => new ClienteCitas
            {
                IdCliente = cliente.IdCliente,
                Nombre = cliente.Nombre,
                TotalCitas = citas.Count(c => c.IdCliente == cliente.IdCliente),
                CitasConfirmadas = citas.Count(c => c.IdCliente == cliente.IdCliente && c.Estado == "Confirmada"),
                CitasPendientes = citas.Count(c => c.IdCliente == cliente.IdCliente && c.Estado == "Pendiente"),
                CitasCanceladas = citas.Count(c => c.IdCliente == cliente.IdCliente && c.Estado == "Cancelada")
            })
            .OrderByDescending(c => c.TotalCitas)
            .Take(10)
            .ToList();
    }

    private void FiltrarCitas()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCitas = citas?
                .OrderBy(c => clientes.FirstOrDefault(cliente => cliente.IdCliente == c.IdCliente)?.Nombre)
                .ToList();
        }
        else
        {
            var term = searchTerm.ToLower();
            filteredCitas = citas?
                .Where(c => 
                    (clientes.FirstOrDefault(cliente => cliente.IdCliente == c.IdCliente)?.Nombre?.ToLower().Contains(term) ?? false) ||
                    c.Descripcion?.ToLower().Contains(term) == true ||
                    c.Estado?.ToLower().Contains(term) == true ||
                    c.FechaCita.ToString().Contains(term) ||
                    (c.Hora.HasValue && c.Hora.Value.ToString().Contains(term))
                )
                .OrderBy(c => clientes.FirstOrDefault(cliente => cliente.IdCliente == c.IdCliente)?.Nombre)
                .ToList();
        }
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        FiltrarCitas();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarGraficosDesdeAPI();
        }
    }

    private async Task CargarClientes()
    {
        try
        {
            clientes = await Http.GetFromJsonAsync<List<Cliente>>("https://localhost:7003/api/Clientes");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error al cargar clientes: {ex.Message}");
        }
    }

    private async Task CargarCitas()
    {
        try
        {
            citas = await Http.GetFromJsonAsync<List<Cita>>("https://localhost:7003/api/Citas");
            if (citas != null)
            {
                citas = citas.OrderBy(c => c.IdCita).ToList();
                filteredCitas = citas.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error al cargar citas: {ex.Message}");
        }
    }

    private async Task ExportarExcel()
    {
        await JSRuntime.InvokeVoidAsync("exportarGraficosExcel");
    }

    private async Task ExportarPDF()
    {
        await JSRuntime.InvokeVoidAsync("exportarGraficosPDF");
    }

    private async Task CargarGraficosDesdeAPI()
    {
        try
        {
            // 1. Estados
            var estadosData = await Http.GetFromJsonAsync<List<EstadoResumen>>("https://localhost:7003/api/Graficos/EstadosCitas");
            var estadosLabels = estadosData.Select(e => e.Estado).ToArray();
            var estadosTotals = estadosData.Select(e => e.Total).ToArray();

            // Guardar los valores en variables para los stats cards
            confirmadas = estadosData.FirstOrDefault(e => e.Estado == "Confirmada")?.Total ?? 0;
            pendientes = estadosData.FirstOrDefault(e => e.Estado == "Pendiente")?.Total ?? 0;
            canceladas = estadosData.FirstOrDefault(e => e.Estado == "Cancelada")?.Total ?? 0;

            // 2. Meses
            var mesesData = await Http.GetFromJsonAsync<List<MesResumen>>("https://localhost:7003/api/Graficos/CitasPorMes");
            var mesesLabels = mesesData.Select(m => m.Mes).ToArray();
            var mesesTotals = mesesData.Select(m => m.Cantidad).ToArray();

            // 3. Top Clientes
            var clientesData = await Http.GetFromJsonAsync<List<ClienteResumen>>("https://localhost:7003/api/Graficos/TopClientes");
            var clientesLabels = clientesData.Select(c => c.Nombre).ToArray();
            var clientesTotals = clientesData.Select(c => c.TotalCitas).ToArray();

            await JSRuntime.InvokeVoidAsync("crearGraficos",
                estadosLabels, estadosTotals,
                mesesLabels, mesesTotals,
                clientesLabels, clientesTotals);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error cargando datos para gráficos: " + ex.Message);
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    // Modelos temporales para los endpoints de gráficos
    public class EstadoResumen
    {
        public string Estado { get; set; }
        public int Total { get; set; }
    }
    public class MesResumen
    {
        public string Mes { get; set; }
        public int Cantidad { get; set; }
    }
    public class ClienteResumen
    {
        public int IdCliente { get; set; }
        public string Nombre { get; set; }
        public int TotalCitas { get; set; }
    }

    public class ClienteCitas
    {
        public int IdCliente { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public int TotalCitas { get; set; }
        public int CitasConfirmadas { get; set; }
        public int CitasPendientes { get; set; }
        public int CitasCanceladas { get; set; }
    }
}

<style>
    .page-container {
        padding: 2rem;
        background-color: #f1f0fa;
        color: #222;
        font-family: 'Segoe UI', sans-serif;
    }

    h1, h2, h3 {
        color: #6f42c1;
        margin-bottom: 1rem;
    }

    .appointments-table {
        background-color: #ffffff;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .stats-container {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
    }

    .stat-card {
    flex: 1;
    min-width: 150px;
    background-color: #f7f7fb;
    border-radius: 10px;
    padding: 1rem;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

.stat-card.confirmadas {
    background-color: #E6F7F0; /* Verde muy claro */
    border-left: 4px solid #10B981; /* Verde de gráficos */
}

.stat-card.pendientes {
    background-color: #FEF6E6; /* Amarillo muy claro */
    border-left: 4px solid #F59E0B; /* Amarillo de gráficos */
}

.stat-card.canceladas {
    background-color: #FCE8E8; /* Rojo muy claro */
    border-left: 4px solid #EF4444; /* Rojo de gráficos */
}

.stat-label {
    display: block;
    font-weight: 500;
    color: #1E3A8A; /* Azul oscuro para etiquetas */
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
}

.stat-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: #1E3A8A; /* Azul oscuro para valores */
}

/* Efectos adicionales para mejor interactividad */
.stat-card.confirmadas:hover {
    box-shadow: 0 4px 8px rgba(16, 185, 129, 0.2);
}

.stat-card.pendientes:hover {
    box-shadow: 0 4px 8px rgba(245, 158, 11, 0.2);
}

.stat-card.canceladas:hover {
    box-shadow: 0 4px 8px rgba(239, 68, 68, 0.2);
}

    .stat-label {
        display: block;
        font-weight: 500;
        color: #4b3c82;
        margin-bottom: 0.5rem;
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #6f42c1;
    }

    .search-export-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .search-box {
        position: relative;
        flex: 1;
        min-width: 250px;
        max-width: 400px;
    }

    .search-input {
        width: 100%;
        padding: 0.5rem 2rem 0.5rem 1rem;
        border: 1px solid #ddd;
        border-radius: 20px;
        font-size: 1rem;
        background-color: #f9f9f9;
        transition: all 0.3s;
    }

    .search-input:focus {
        outline: none;
        border-color: #6f42c1;
        box-shadow: 0 0 0 2px rgba(111, 66, 193, 0.2);
        background-color: #fff;
    }

    .clear-search {
        position: absolute;
        right: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #999;
        cursor: pointer;
        padding: 0.25rem;
    }

    .clear-search:hover {
        color: #6f42c1;
    }

    .export-buttons {
        display: flex;
        gap: 1rem;
    }

    .charts-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .chart-card {
        flex: 1;
        min-width: 300px;
        background-color: #ffffff;
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .chart-card.full-width {
        flex: 100%;
    }

    .chart-card h3 {
        margin-top: 0;
        color: #6f42c1;
        font-size: 1.3rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #eee;
    }

    .chart-wrapper {
        position: relative;
        height: 300px;
    }

    .chart-card.full-width .chart-wrapper {
        height: 400px;
    }

    .table-card {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 1.5rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        margin-bottom: 1.5rem;
    }

    .table-card h3 {
        margin-top: 0;
        color: #6f42c1;
        font-size: 1.3rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #eee;
    }

    .table-responsive {
        overflow-x: auto;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1rem;
    }

    th, td {
        padding: 0.9rem 1rem;
        border: 1px solid #ddd;
        text-align: left;
    }

    th {
        background-color: #e9e6fb;
        color: #4b3c82;
    }

    td {
        background-color: #fcfcff;
    }

    tr:hover {
        background-color: #f0f3ff;
        cursor: pointer;
    }

    .badge-success {
        background-color: #28a745;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 10px;
        font-size: 0.8rem;
    }

    .badge-warning {
        background-color: #ffc107;
        color: #333;
        padding: 0.25rem 0.5rem;
        border-radius: 10px;
        font-size: 0.8rem;
    }

    .badge-error {
        background-color: #dc3545;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 10px;
        font-size: 0.8rem;
    }

    .badge-secondary {
        background-color: #6c757d;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 10px;
        font-size: 0.8rem;
    }

    .header-logo {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .header-logo h1 {
        margin: 0;
        color: #6f42c1;
        font-size: 2rem;
    }

    .logo-img {
        height: 130px;
        width: auto;
    }

    .text-center {
        text-align: center;
    }

    .text-muted {
        color: #6c757d !important;
    }

    .btn {
        padding: 0.5rem 1rem;
        border-radius: 4px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
        border: 1px solid #218838;
    }

    .btn-success:hover {
        background-color: #218838;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: 1px solid #c82333;
    }

    .btn-danger:hover {
        background-color: #c82333;
    }
</style>