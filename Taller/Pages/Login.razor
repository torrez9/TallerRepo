@page "/"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Text.Json.Serialization
@layout LayoutLogin
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<Login> Logger

<PageTitle>Login</PageTitle>

<div class="fondo-login">
    <div class="tarjeta-login">
        <img src="images/logoblanco.png" alt="Logo" class="logo" />
        <h2>¡Bienvenido a <span class="nombre-taller">Taller Motos Tuning</span>!</h2>
        <p class="subtitulo">Ingresa tus credenciales para continuar</p>

        <EditForm Model="@loginModel" OnValidSubmit="@IniciarSesion">
            <DataAnnotationsValidator />
            <ValidationSummary class="validation-summary" />

            <div class="grupo-formulario">
                <label><i class="fas fa-envelope"></i></label>
                <InputText class="campo" @bind-Value="loginModel.Correo" placeholder="Correo electrónico" />
                <ValidationMessage For="@(() => loginModel.Correo)" />
            </div>

            <div class="grupo-formulario">
                <label><i class="fas fa-lock"></i></label>
                <InputText type="password" class="campo" @bind-Value="loginModel.Contraseña" placeholder="Contraseña" />
                <ValidationMessage For="@(() => loginModel.Contraseña)" />
            </div>

            <button type="submit" class="boton-login" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span class="visually-hidden">Cargando...</span>
                }
                else
                {
                    <span>Iniciar Sesión</span>
                }
            </button>
        </EditForm>

        <div class="opciones-login">
            <small><a href="#" @onclick="AbrirModalRegistro">¿No tienes cuenta? Regístrate</a></small>
            <small><a href="#" @onclick="AbrirModalRecuperacion">¿Olvidaste tu contraseña?</a></small>
        </div>
    </div>
</div>

<!-- Modal de registro -->
@if (mostrarModalRegistro)
{
    <div class="modal-background">
        <div class="modal-box-horizontal">
            <div class="modal-header">
                <h3><i class="fas fa-user-plus"></i> Registro de Cliente</h3>
                <button class="close-btn" @onclick="CerrarModalRegistro">&times;</button>
            </div>

            <EditForm Model="@registroModel" OnValidSubmit="@RegistrarCliente">
                <DataAnnotationsValidator />
                <ValidationSummary class="validation-summary" />

                <div class="form-columns">
                    <div class="form-column">
                        <div class="form-group">
                            <label><i class="fas fa-user"></i> Nombre*</label>
                            <InputText class="form-control" @bind-Value="registroModel.Nombre" />
                            <ValidationMessage For="@(() => registroModel.Nombre)" />
                        </div>

                        <div class="form-group">
                            <label><i class="fas fa-user"></i> Apellido*</label>
                            <InputText class="form-control" @bind-Value="registroModel.Apellido" />
                            <ValidationMessage For="@(() => registroModel.Apellido)" />
                        </div>

                        <div class="form-group">
                            <label><i class="fas fa-phone"></i> Teléfono*</label>
                            <InputText class="form-control" @bind-Value="registroModel.Telefono" />
                            <ValidationMessage For="@(() => registroModel.Telefono)" />
                        </div>

                        <div class="form-group">
                            <label><i class="fas fa-envelope"></i> Correo*</label>
                            <InputText class="form-control" @bind-Value="registroModel.Correo" />
                            <ValidationMessage For="@(() => registroModel.Correo)" />
                        </div>
                    </div>

                    <div class="form-column">
                        <div class="form-group">
                            <label><i class="fas fa-map-marker-alt"></i> Dirección</label>
                            <InputText class="form-control" @bind-Value="registroModel.Direccion" />
                        </div>

                        <div class="form-group">
                            <label><i class="fas fa-at"></i> Nombre de Usuario*</label>
                            <InputText class="form-control" @bind-Value="registroModel.NombreUsuario" />
                            <ValidationMessage For="@(() => registroModel.NombreUsuario)" />
                        </div>

                        <div class="form-group">
                            <label><i class="fas fa-key"></i> Contraseña*</label>
                            <InputText type="password" class="form-control" @bind-Value="registroModel.Contraseña" />
                            <ValidationMessage For="@(() => registroModel.Contraseña)" />
                        </div>

                        <div class="form-group">
                            <label><i class="fas fa-key"></i> Confirmar Contraseña*</label>
                            <InputText type="password" class="form-control" @bind-Value="registroModel.ConfirmarContraseña" />
                            <ValidationMessage For="@(() => registroModel.ConfirmarContraseña)" />
                        </div>
                    </div>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn-cancel" @onclick="CerrarModalRegistro" disabled="@isLoading">Cancelar</button>
                    <button type="submit" class="btn-save" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        Crear cuenta
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

<!-- Modal de recuperación de contraseña -->
@if (mostrarModalRecuperacion)
{
    <div class="modal-background">
        <div class="modal-box">
            <h3><i class="fas fa-key"></i> Restablecer Contraseña</h3>

            <EditForm Model="@recuperacionModel" OnValidSubmit="@SolicitarRestablecimiento">
                <DataAnnotationsValidator />
                <ValidationSummary class="validation-summary" />

                <div class="form-group">
                    <label><i class="fas fa-envelope"></i> Correo electrónico*</label>
                    <InputText class="form-control" @bind-Value="recuperacionModel.Email" placeholder="Ingresa tu correo" />
                    <ValidationMessage For="@(() => recuperacionModel.Email)" />
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn-cancel" @onclick="CerrarModalRecuperacion" disabled="@isLoading">Cancelar</button>
                    <button type="submit" class="btn-warning" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        Enviar nueva contraseña
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

<!-- Notificación Toast -->
@if (mostrarNotificacion)
{
    <div class="toast-container">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header @(notificacionExito ? "toast-success" : "toast-error")">
                <strong class="me-auto">@(notificacionExito ? "Éxito" : "Error")</strong>
                <button type="button" class="btn-close" @onclick="CerrarNotificacion" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                @mensajeNotificacion
            </div>
        </div>
    </div>
}

@code {
    private bool mostrarModalRegistro = false;
    private bool mostrarModalRecuperacion = false;
    private bool mostrarNotificacion = false;
    private bool notificacionExito = false;
    private bool isLoading = false;
    private string mensajeNotificacion = string.Empty;

    private LoginModel loginModel = new();
    private RegistroClienteModel registroModel = new();
    private RecuperacionModel recuperacionModel = new();

    private async Task IniciarSesion()
    {
        isLoading = true;
        try
        {
            var response = await Http.PostAsJsonAsync("api/Auth/login", new
            {
                Correo = loginModel.Correo,
                Contraseña = loginModel.Contraseña
            });

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();

                try
                {
                    var resultado = JsonSerializer.Deserialize<LoginResponse>(responseContent,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                    if (resultado == null || string.IsNullOrEmpty(resultado.Token))
                    {
                        MostrarNotificacion("❌ Error: Respuesta del servidor inválida", false);
                        Logger.LogWarning("Respuesta de login inválida");
                        return;
                    }

                    // Serializar el objeto cliente a JSON string
                    var clienteSerializado = JsonSerializer.Serialize(resultado.Cliente);

                    // Almacenar en localStorage
                    await JSRuntime.InvokeVoidAsync("authManager.storeUserData",
                        resultado.Token,
                        clienteSerializado);

                    // Notificar autenticación
                    // if (AuthStateProvider is CustomAuthStateProvider customProvider)
                    // {
                    //     await customProvider.NotifyUserAuthenticationAsync(resultado.Token, resultado.Cliente);
                    // }

                    MostrarNotificacion("✅ Inicio de sesión exitoso", true);
                    Logger.LogInformation($"Login exitoso para: {loginModel.Correo}");
                    await Task.Delay(1500);
                    Navigation.NavigateTo("/home", true);
                }
                catch (JsonException jsonEx)
                {
                    MostrarNotificacion("❌ Error al procesar la respuesta del servidor", false);
                    Logger.LogError(jsonEx, "Error al deserializar respuesta de login");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                MostrarNotificacion("❌ Credenciales incorrectas", false);
                Logger.LogWarning($"Intento de login fallido para: {loginModel.Correo}");
            }
        }
        catch (Exception ex)
        {
            MostrarNotificacion("❌ Error al conectar con el servidor", false);
            Logger.LogError(ex, $"Error en el proceso de login para: {loginModel.Correo}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RegistrarCliente()
    {
        isLoading = true;
        try
        {
            if (registroModel.Contraseña != registroModel.ConfirmarContraseña)
            {
                MostrarNotificacion("❌ Las contraseñas no coinciden", false);
                return;
            }

            var response = await Http.PostAsJsonAsync("api/auth/register", new
            {
                Nombre = registroModel.Nombre,
                Apellido = registroModel.Apellido,
                Telefono = registroModel.Telefono,
                Correo = registroModel.Correo,
                NombreUsuario = registroModel.NombreUsuario,
                Contraseña = registroModel.Contraseña,
                Direccion = registroModel.Direccion
            });

            if (response.IsSuccessStatusCode)
            {
                MostrarNotificacion("✅ Cliente registrado correctamente", true);
                Logger.LogInformation($"Nuevo cliente registrado: {registroModel.Correo}");
                mostrarModalRegistro = false;
                registroModel = new();
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                MostrarNotificacion($"❌ Error: {errorResponse}", false);
                Logger.LogWarning($"Error al registrar cliente: {errorResponse}");
            }
        }
        catch (Exception ex)
        {
            MostrarNotificacion("❌ Error al registrar cliente", false);
            Logger.LogError(ex, $"Error al registrar cliente: {registroModel.Correo}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SolicitarRestablecimiento()
    {
        isLoading = true;
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/reset-password", new
            {
                Email = recuperacionModel.Email
            });

            if (response.IsSuccessStatusCode)
            {
                MostrarNotificacion("✅ Se ha enviado una nueva contraseña a tu correo electrónico", true);
                Logger.LogInformation($"Contraseña reseteada para: {recuperacionModel.Email}");
                mostrarModalRecuperacion = false;
                recuperacionModel = new();
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                MostrarNotificacion($"❌ Error: {errorResponse}", false);
                Logger.LogWarning($"Error al resetear contraseña: {errorResponse}");
            }
        }
        catch (Exception ex)
        {
            MostrarNotificacion("❌ Error al conectar con el servidor", false);
            Logger.LogError(ex, $"Error al resetear contraseña para: {recuperacionModel.Email}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async void MostrarNotificacion(string mensaje, bool exito)
    {
        mensajeNotificacion = mensaje;
        notificacionExito = exito;
        mostrarNotificacion = true;
        StateHasChanged();

        await Task.Delay(4000);
        if (mostrarNotificacion)
        {
            mostrarNotificacion = false;
            StateHasChanged();
        }
    }

    private void CerrarNotificacion() => mostrarNotificacion = false;
    private void AbrirModalRegistro() => mostrarModalRegistro = true;
    private void CerrarModalRegistro() => mostrarModalRegistro = false;
    private void AbrirModalRecuperacion() => mostrarModalRecuperacion = true;
    private void CerrarModalRecuperacion() => mostrarModalRecuperacion = false;

    public class LoginModel
    {
        [Required(ErrorMessage = "El correo es requerido")]
        [EmailAddress(ErrorMessage = "Correo electrónico no válido")]
        public string Correo { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es requerida")]
        [MinLength(6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres")]
        public string Contraseña { get; set; } = string.Empty;
    }

    public class RegistroClienteModel
    {
        [Required(ErrorMessage = "El nombre es requerido")]
        [MinLength(2, ErrorMessage = "El nombre debe tener al menos 2 caracteres")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "El apellido es requerido")]
        [MinLength(2, ErrorMessage = "El apellido debe tener al menos 2 caracteres")]
        public string Apellido { get; set; } = string.Empty;

        [Required(ErrorMessage = "El teléfono es requerido")]
        [RegularExpression(@"^[0-9]+$", ErrorMessage = "Solo se permiten números")]
        [MinLength(8, ErrorMessage = "El teléfono debe tener al menos 8 dígitos")]
        public string Telefono { get; set; } = string.Empty;

        [Required(ErrorMessage = "El correo es requerido")]
        [EmailAddress(ErrorMessage = "Correo electrónico no válido")]
        public string Correo { get; set; } = string.Empty;

        public string? Direccion { get; set; }

        [Required(ErrorMessage = "El nombre de usuario es requerido")]
        [MinLength(4, ErrorMessage = "El nombre de usuario debe tener al menos 4 caracteres")]
        public string NombreUsuario { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es requerida")]
        [MinLength(6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres")]
        public string Contraseña { get; set; } = string.Empty;

        [Required(ErrorMessage = "Debes confirmar la contraseña")]
        [Compare("Contraseña", ErrorMessage = "Las contraseñas no coinciden")]
        public string ConfirmarContraseña { get; set; } = string.Empty;
    }

    public class RecuperacionModel
    {
        [Required(ErrorMessage = "El correo es requerido")]
        [EmailAddress(ErrorMessage = "Correo electrónico no válido")]
        public string Email { get; set; } = string.Empty;
    }

    public class LoginResponse
    {
        [JsonPropertyName("token")]
        public string Token { get; set; } = string.Empty;

        [JsonPropertyName("cliente")]
        public ClienteResponse Cliente { get; set; } = new();
    }

    public class ClienteResponse
    {
        [JsonPropertyName("idCliente")]
        public int IdCliente { get; set; }

        [JsonPropertyName("nombre")]
        public string Nombre { get; set; } = string.Empty;

        [JsonPropertyName("apellido")]
        public string Apellido { get; set; } = string.Empty;

        [JsonPropertyName("correo")]
        public string Correo { get; set; } = string.Empty;

        [JsonPropertyName("usuario")]
        public string Usuario { get; set; } = string.Empty;
    }
}

<style>

    /* Estilos para el modal horizontal */
    .modal-box-horizontal {
        background-color: #000000;
        padding: 2rem;
        border: 1px solid #333;
        width: 90%;
        max-width: 800px; /* Más ancho para acomodar dos columnas */
        box-shadow: 0 4px 16px rgba(128, 0, 255, 0.4);
        color: white;
        border-radius: 10px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

        .modal-header h3 {
            margin: 0;
            font-size: 1.6rem;
            color: #b28df7;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .close-btn {
        background: none;
        border: none;
        color: #ccc;
        font-size: 1.8rem;
        cursor: pointer;
        transition: color 0.3s;
    }

        .close-btn:hover {
            color: #b28df7;
        }

    .form-columns {
        display: flex;
        gap: 1.5rem;
    }

    .form-column {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    /* Ajustes para los campos del formulario */
    .form-group {
        margin-bottom: 0;
    }

        .form-group label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #b28df7;
            font-size: 0.9rem;
        }

    .form-control {
        width: 100%;
        padding: 0.6rem;
        font-size: 1rem;
        border: 1px solid #333;
        border-radius: 8px;
        background-color: #2d2d2d;
        color: white;
        transition: border-color 0.3s;
    }

        .form-control:focus {
            border-color: #b28df7;
            outline: none;
        }

    /* Responsive */
    @@media (max-width: 768px) {
        .form-columns

    {
        flex-direction: column;
        gap: 1rem;
    }

    .modal-box-horizontal {
        max-width: 500px;
    }

    }

    @@media (max-width: 480px) {
        .modal-box-horizontal

    {
        padding: 1.5rem 1rem;
        width: 95%;
    }

    .modal-header h3 {
        font-size: 1.3rem;
    }

    .form-group label {
        font-size: 0.85rem;
    }

    .form-control {
        padding: 0.5rem;
        font-size: 0.9rem;
    }

    }

    /* Estilos se mantienen iguales */
    .fondo-login {
        background: white;
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        font-family: 'Segoe UI', sans-serif;
        padding: 1rem;
    }

    .tarjeta-login {
        background: #000000;
        backdrop-filter: blur(6px);
        padding: 2rem;
        border-radius: 20px;
        width: 100%;
        max-width: 400px;
        text-align: center;
        color: #ffffff;
        box-shadow: 0 0 20px rgba(128, 0, 255, 0.4);
    }

    .logo {
        width: 150px;
        height: 150px;
        margin-bottom: 1rem;
    }

    .nombre-taller {
        color: #b28df7;
    }

    .subtitulo {
        font-size: 0.9rem;
        color: #ccc;
        margin-bottom: 1.5rem;
    }

    .grupo-formulario {
        display: flex;
        align-items: center;
        background-color: #1e1e1e;
        border-radius: 8px;
        margin: 0.5rem 0;
        padding: 0.5rem;
    }

        .grupo-formulario label {
            color: #b28df7;
            margin-right: 0.5rem;
        }

    .campo {
        flex: 1;
        background: transparent;
        border: none;
        color: white;
        outline: none;
    }

    .boton-login {
        background: linear-gradient(to right, #a067f7, #8d4eff);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.75rem;
        width: 100%;
        font-size: 1rem;
        cursor: pointer;
        transition: 0.3s;
        margin-top: 1rem;
    }

        .boton-login:hover {
            opacity: 0.9;
        }

    .opciones-login {
        margin-top: 1rem;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

        .opciones-login a {
            color: #b28df7;
            text-decoration: none;
            font-size: 0.8rem;
        }

            .opciones-login a:hover {
                text-decoration: underline;
            }

    /* Modal */
    .modal-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-box {
        background-color: #000000;
        padding: 2rem;
        border: 1px solid #333;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 4px 16px rgba(128, 0, 255, 0.4);
        color: white;
    }

        .modal-box h3 {
            margin-top: 0;
            font-size: 1.6rem;
            color: #b28df7;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .form-group {
        margin-bottom: 1rem;
    }

        .form-group label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #b28df7;
        }

    .form-control {
        width: 100%;
        padding: 0.6rem;
        font-size: 1rem;
        border: 1px solid #333;
        border-radius: 8px;
        background-color: #2d2d2d;
        color: white;
    }

    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .btn-cancel, .btn-save, .btn-warning {
        padding: 0.6rem 1.2rem;
        border: none;
        border-radius: 25px;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-cancel {
        background-color: #6c757d;
        color: white;
    }

        .btn-cancel:hover {
            background-color: #5a6268;
        }

    .btn-save {
        background: linear-gradient(to right, #a067f7, #8d4eff);
        color: white;
    }

        .btn-save:hover {
            opacity: 0.9;
        }

    .btn-warning {
        background: linear-gradient(to right, #ffc107, #ffab00);
        color: #333;
    }

        .btn-warning:hover {
            opacity: 0.9;
        }

    /* Toast */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1100;
    }

    .toast {
        min-width: 300px;
        background-color: #2d2d2d;
        border: 1px solid #444;
    }

    .toast-success {
        border-left: 4px solid #28a745;
    }

    .toast-error {
        border-left: 4px solid #dc3545;
    }

    .toast-header {
        background-color: #333;
        color: white;
        border-bottom: 1px solid #444;
    }

    .toast-body {
        color: #eee;
    }

    /* Responsivo */
    @@media (max-width: 480px) {
        .tarjeta-login {
            padding: 1.5rem 1rem;
        }

        .logo {
            width: 100px;
            height: 100px;
        }

        h2 {
            font-size: 1.2rem;
        }

        .subtitulo {
            font-size: 0.85rem;
        }

        .boton-login {
            font-size: 0.95rem;
        }

        .modal-box {
            padding: 1.5rem;
        }
    }
</style>