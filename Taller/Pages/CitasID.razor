@page "/CitasID"
@inject HttpClient Http
@using System.Net.Http.Headers
@using System.Net
@using System.Security.Claims
@using Taller.Models
@using System.Net.Http.Json
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Citas</PageTitle>

<div class="page-container">
    <div class="header-container">
        <div class="header-logo">
            <img src="images/logotuning.png" alt="Logo Taller" class="logo-img" />
            <h1>Gestión de Citas</h1>
        </div>
    </div>

    <div class="appointments-grid">
        <!-- Sección para agregar nueva cita -->
        <div class="card new-appointment-card">
            <div class="card-header">
                <h3><i class="fas fa-calendar-plus"></i> Nueva Cita</h3>
            </div>
            <div class="card-body">
                <EditForm Model="nuevaCita" OnValidSubmit="AgregarCita">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>Cliente</label>
                        <div class="form-control-static">
                            @currentUser?.Nombre
                        </div>
                        <input type="hidden" @bind="nuevaCita.IdCliente" />
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label>Fecha de la Cita*</label>
                            <InputDate @bind-Value="nuevaCita.FechaCita" class="form-control" required />
                        </div>
                        <div class="form-group col-md-6">
                            <label>Hora de la Cita*</label>
                            <input type="time" class="form-control" @bind="nuevaCita.Hora" required />
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Descripción*</label>
                        <InputTextArea @bind-Value="nuevaCita.Descripcion" class="form-control" rows="3" required
                                       placeholder="Describa el servicio requerido..." />
                    </div>

                    <div class="form-group">
                        <label>Estado</label>
                        <InputSelect class="form-select" @bind-Value="nuevaCita.Estado">
                            <option value="Pendiente">Pendiente</option>
                            <option value="Confirmada">Confirmada</option>
                            <option value="Cancelada">Cancelada</option>
                        </InputSelect>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Guardar Cita
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="RecargarCitas">
                            <i class="fas fa-sync-alt"></i> Recargar
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>

        <!-- Sección para visualizar citas existentes -->
        <div class="card appointments-table">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h3><i class="fas fa-calendar-alt"></i> Mis Citas</h3>
                    <span class="badge bg-primary">Total: @citas.Count</span>
                </div>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        <p class="mt-2">Cargando tus citas...</p>
                    </div>
                }
                else if (!citas.Any())
                {
                    <div class="text-center py-4">
                        <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No tienes citas programadas</p>
                    </div>
                }
                else
                {
                    <div class="table-container">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>ID</th>
                                    <th>Fecha</th>
                                    <th>Hora</th>
                                    <th>Descripción</th>
                                    <th>Estado</th>
                                    <th class="text-end">Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var cita in citas.OrderByDescending(c => c.FechaCita))
                                {
                                    <tr>
                                        <td>@cita.IdCita</td>
                                        <td>@cita.FechaCita.ToString("dd/MM/yyyy")</td>
                                        <td>@cita.Hora.Value.ToString("HH:mm")</td>
                                        <td>@(cita.Descripcion?.Length > 30 ? cita.Descripcion.Substring(0, 30) + "..." : cita.Descripcion)</td>
                                        <td>
                                            <span class="badge @GetStatusClass(cita.Estado)">@cita.Estado</span>
                                        </td>
                                        <td class="text-end">
                                            <button class="btn btn-sm btn-edit" @onclick="() => EditarCita(cita)" title="Reprogramar">
                                                <i class="fas fa-edit"></i> Reprogramar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal para editar cita -->
@if (citaSeleccionada != null)
{
    <div class="modal-overlay">
        <div class="modal-container">
            <div class="modal-header">
                <h3><i class="fas fa-edit"></i> Reprogramar Cita #@citaSeleccionada.IdCita</h3>
                <button class="modal-close-btn" @onclick="CancelarEdicion">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="citaSeleccionada" OnValidSubmit="ActualizarCita">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-row">
                        <div class="form-group">
                            <label>Fecha de la Cita*</label>
                            <InputDate @bind-Value="citaSeleccionada.FechaCita" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label>Hora de la Cita*</label>
                            <input type="time" class="form-control" @bind="citaSeleccionada.Hora" required />
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Descripción*</label>
                        <InputTextArea @bind-Value="citaSeleccionada.Descripcion" class="form-control" rows="3" required />
                    </div>

                    <div class="form-group">
                        <label>Estado</label>
                        <InputSelect class="form-select" @bind-Value="citaSeleccionada.Estado">
                            <option value="Pendiente">Pendiente</option>
                            <option value="Confirmada">Confirmada</option>
                            <option value="Cancelada">Cancelada</option>
                        </InputSelect>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelarEdicion">
                            <i class="fas fa-times"></i> Cancelar
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Guardar Cambios
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- Notificación Toast -->
@if (mostrarNotificacion)
{
    <div class="toast-container">
        <div class="toast show @(notificacionExito ? "toast-success" : "toast-error")">
            <div class="toast-header">
                <strong>@(notificacionExito ? "Éxito" : "Error")</strong>
                <button type="button" class="btn-close" @onclick="CerrarNotificacion">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="toast-body">
                @mensaje
            </div>
        </div>
    </div>
}

@code {
    private List<Cita> citas = new();
    private Cliente currentUser;
    private Cita citaSeleccionada;
    private bool isLoading = true;

    private Cita nuevaCita = new()
    {
        FechaCita = DateOnly.FromDateTime(DateTime.Now),
        Hora = new TimeOnly(DateTime.Now.Hour, DateTime.Now.Minute),
        Estado = "Pendiente",
        Descripcion = ""
    };

    private string mensaje = "";
    private bool mostrarNotificacion = false;
    private bool notificacionExito = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuario();
        await CargarCitasUsuario();
    }

    private async Task CargarUsuario()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    currentUser = await Http.GetFromJsonAsync<Cliente>($"api/Clientes/{userId}");
                    nuevaCita.IdCliente = currentUser?.IdCliente ?? 0;
                }
            }
        }
        catch (Exception ex)
        {
            MostrarNotificacion($"❌ Error al cargar usuario: {ex.Message}", false);
        }
    }

    private async Task CargarCitasUsuario()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var token = await JSRuntime.InvokeAsync<string>("authManager.getAuthToken");
            if (string.IsNullOrEmpty(token))
            {
                MostrarNotificacion("❌ No estás autenticado. Por favor inicia sesión.", false);
                NavigationManager.NavigateTo("/login", true);
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Usar el nuevo endpoint que obtiene citas por token
            var response = await Http.GetAsync("api/Citas/MisCitas");

            if (response.IsSuccessStatusCode)
            {
                citas = await response.Content.ReadFromJsonAsync<List<Cita>>() ?? new List<Cita>();
            }
            else if (response.StatusCode == HttpStatusCode.Unauthorized)
            {
                MostrarNotificacion("❌ Sesión expirada. Por favor inicia sesión nuevamente.", false);
                await JSRuntime.InvokeVoidAsync("authManager.clearUserData");
                NavigationManager.NavigateTo("/login", true);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                MostrarNotificacion($"❌ Error al cargar citas: {errorContent}", false);
            }
        }
        catch (Exception ex)
        {
            MostrarNotificacion($"❌ Error al cargar citas: {ex.Message}", false);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RecargarCitas()
    {
        await CargarCitasUsuario();
    }

    private async Task AgregarCita()
    {
        try
        {
            if (nuevaCita.Hora == default)
            {
                MostrarNotificacion("❌ La hora de la cita es requerida.", false);
                return;
            }

            if (string.IsNullOrWhiteSpace(nuevaCita.Descripcion))
            {
                MostrarNotificacion("❌ La descripción es requerida.", false);
                return;
            }

            var token = await JSRuntime.InvokeAsync<string>("authManager.getAuthToken");
            if (string.IsNullOrEmpty(token))
            {
                MostrarNotificacion("❌ No estás autenticado.", false);
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PostAsJsonAsync("api/Citas", nuevaCita);

            if (response.IsSuccessStatusCode)
            {
                var citaAgregada = await response.Content.ReadFromJsonAsync<Cita>();
                citas.Insert(0, citaAgregada);
                MostrarNotificacion("✅ Cita creada exitosamente.", true);

                nuevaCita = new()
                {
                    IdCliente = currentUser?.IdCliente ?? 0,
                    FechaCita = DateOnly.FromDateTime(DateTime.Now),
                    Hora = new TimeOnly(DateTime.Now.Hour, DateTime.Now.Minute),
                    Estado = "Pendiente",
                    Descripcion = ""
                };
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                MostrarNotificacion($"❌ Error al crear cita: {errorContent}", false);
            }
        }
        catch (Exception ex)
        {
            MostrarNotificacion($"❌ Error inesperado: {ex.Message}", false);
        }
    }

    private void EditarCita(Cita cita)
    {
        citaSeleccionada = new Cita
        {
            IdCita = cita.IdCita,
            IdCliente = cita.IdCliente,
            FechaCita = cita.FechaCita,
            Hora = cita.Hora,
            Descripcion = cita.Descripcion,
            Estado = cita.Estado
        };
    }

    private async Task ActualizarCita()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("authManager.getAuthToken");
            if (string.IsNullOrEmpty(token))
            {
                MostrarNotificacion("❌ No estás autenticado.", false);
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PutAsJsonAsync($"api/Citas/{citaSeleccionada.IdCita}", citaSeleccionada);

            if (response.IsSuccessStatusCode)
            {
                var index = citas.FindIndex(c => c.IdCita == citaSeleccionada.IdCita);
                if (index >= 0)
                {
                    citas[index] = citaSeleccionada;
                }

                MostrarNotificacion("✅ Cita actualizada exitosamente.", true);
                citaSeleccionada = null;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                MostrarNotificacion($"❌ Error al actualizar cita: {errorContent}", false);
            }
        }
        catch (Exception ex)
        {
            MostrarNotificacion($"❌ Error inesperado: {ex.Message}", false);
        }
    }

    private void CancelarEdicion()
    {
        citaSeleccionada = null;
    }

    private string GetStatusClass(string estado)
    {
        return estado switch
        {
            "Confirmada" => "bg-success",
            "Cancelada" => "bg-danger",
            _ => "bg-warning"
        };
    }

    private void MostrarNotificacion(string mensajeNotificacion, bool exito)
    {
        mensaje = mensajeNotificacion;
        notificacionExito = exito;
        mostrarNotificacion = true;

        Task.Run(async () =>
        {
            await Task.Delay(5000);
            if (mostrarNotificacion)
            {
                await InvokeAsync(() =>
                {
                    mostrarNotificacion = false;
                    StateHasChanged();
                });
            }
        });
    }

    private void CerrarNotificacion()
    {
        mostrarNotificacion = false;
    }
}

<style>
    /* Estilos base */
    :root {
        --primary-color: #6f42c1;
        --secondary-color: #5a32a8;
        --success-color: #28a745;
        --danger-color: #dc3545;
        --warning-color: #ffc107;
        --info-color: #17a2b8;
        --light-color: #f8f9fa;
        --dark-color: #343a40;
        --border-radius: 0.375rem;
        --box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        line-height: 1.6;
        color: #212529;
        background-color: #f8f9fa;
    }

    .page-container {
        padding: 2rem;
        min-height: 100vh;
    }

    .header-container {
        margin-bottom: 2rem;
    }

    .header-logo {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
    }

        .header-logo h1 {
            margin: 0;
            color: var(--primary-color);
            font-size: 2rem;
            font-weight: 600;
        }

    .logo-img {
        height: 80px;
        width: auto;
        object-fit: contain;
    }

    /* Grid principal */
    .appointments-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }

    @@media (min-width: 992px) {
        .appointments-grid {
            grid-template-columns: 1fr 2fr;
        }
    }

    /* Tarjetas */
    .card {
        border: none;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        overflow: hidden;
        background-color: white;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 1rem 1.5rem rgba(0, 0, 0, 0.1);
        }

    .card-header {
        background-color: var(--primary-color);
        color: white;
        padding: 1rem 1.5rem;
    }

        .card-header h3 {
            margin: 0;
            font-size: 1.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .card-body {
        padding: 1.5rem;
    }

    /* Contenedor de tabla con scroll */
    .table-container {
        max-height: 600px;
        overflow-y: auto;
        border-radius: var(--border-radius);
        border: 1px solid #dee2e6;
    }

        /* Estilos para la barra de scroll */
        .table-container::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        .table-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }

        .table-container::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }

            .table-container::-webkit-scrollbar-thumb:hover {
                background: #555;
            }

    /* Formularios */
    .form-group {
        margin-bottom: 1.25rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #495057;
    }

    .form-control {
        display: block;
        width: 100%;
        padding: 0.5rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: var(--border-radius);
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .form-control:focus {
            color: #495057;
            background-color: #fff;
            border-color: var(--primary-color);
            outline: 0;
            box-shadow: 0 0 0 0.25rem rgba(111, 66, 193, 0.25);
        }

    .form-select {
        display: block;
        width: 100%;
        padding: 0.5rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: var(--border-radius);
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .form-select:focus {
            border-color: var(--primary-color);
            outline: 0;
            box-shadow: 0 0 0 0.25rem rgba(111, 66, 193, 0.25);
        }

    .form-control-static {
        padding: 0.5rem 0;
        font-weight: 500;
    }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
    }

        .form-row > .form-group {
            flex: 1;
            min-width: 200px;
        }

    .form-actions {
        margin-top: 1.5rem;
        text-align: right;
    }

    /* Tablas */
    .table {
        width: 100%;
        margin-bottom: 1rem;
        color: #212529;
        border-collapse: collapse;
    }

        .table th,
        .table td {
            padding: 0.75rem;
            vertical-align: top;
            border-top: 1px solid #dee2e6;
        }

        .table thead th {
            vertical-align: bottom;
            border-bottom: 2px solid #dee2e6;
            background-color: #f8f9fa;
            color: #495057;
            font-weight: 600;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .table tbody + tbody {
            border-top: 2px solid #dee2e6;
        }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.075);
    }

    /* Badges */
    .badge {
        display: inline-block;
        padding: 0.35em 0.65em;
        font-size: 0.75em;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
    }

    .bg-primary {
        background-color: var(--primary-color) !important;
    }

    .bg-success {
        background-color: var(--success-color) !important;
    }

    .bg-warning {
        background-color: var(--warning-color) !important;
    }

    .bg-danger {
        background-color: var(--danger-color) !important;
    }

    /* Modal mejorado */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
    }

    .modal-container {
        background-color: white;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        z-index: 1060;
    }

    .modal-header {
        padding: 1rem 1.5rem;
        background-color: var(--primary-color);
        color: white;
        border-top-left-radius: var(--border-radius);
        border-top-right-radius: var(--border-radius);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .modal-header h3 {
            margin: 0;
            font-size: 1.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .modal-close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 1.25rem;
        cursor: pointer;
        padding: 0.25rem;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .modal-footer {
        padding: 1rem 1.5rem;
        background-color: #f8f9fa;
        border-bottom-left-radius: var(--border-radius);
        border-bottom-right-radius: var(--border-radius);
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
    }

    /* Toast */
    .toast-container {
        position: fixed;
        bottom: 1rem;
        right: 1rem;
        z-index: 1100;
    }

    .toast {
        display: flex;
        flex-direction: column;
        min-width: 300px;
        background-color: white;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        overflow: hidden;
        margin-bottom: 1rem;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .toast.show {
            opacity: 1;
        }

    .toast-success .toast-header {
        background-color: var(--success-color);
        color: white;
    }

    .toast-error .toast-header {
        background-color: var(--danger-color);
        color: white;
    }

    .toast-header {
        padding: 0.75rem 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .toast-header strong {
            font-weight: 600;
        }

    .toast-body {
        padding: 1rem;
    }

    /* Utilidades */
    .text-center {
        text-align: center;
    }

    .text-muted {
        color: #6c757d !important;
    }

    .d-flex {
        display: flex !important;
    }

    .justify-content-between {
        justify-content: space-between !important;
    }

    .align-items-center {
        align-items: center !important;
    }

    .py-4 {
        padding-top: 1.5rem !important;
        padding-bottom: 1.5rem !important;
    }

    .mt-2 {
        margin-top: 0.5rem !important;
    }

    .position-fixed {
        position: fixed !important;
    }

    .bottom-0 {
        bottom: 0 !important;
    }

    .end-0 {
        right: 0 !important;
    }

    .p-3 {
        padding: 1rem !important;
    }

    .text-white {
        color: white !important;
    }

    .text-end {
        text-align: right !important;
    }

    /* Botones */
    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        font-weight: 400;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        user-select: none;
        border: 1px solid transparent;
        padding: 0.5rem 1rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: var(--border-radius);
        transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        cursor: pointer;
    }

    .btn-primary {
        color: #fff;
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }

        .btn-primary:hover {
            background-color: var(--secondary-color);
            border-color: var(--secondary-color);
        }

    .btn-secondary {
        color: #fff;
        background-color: #6c757d;
        border-color: #6c757d;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
            border-color: #545b62;
        }

    .btn-edit {
        color: #fff;
        background-color: var(--warning-color);
        border-color: var(--warning-color);
    }

        .btn-edit:hover {
            background-color: #e0a800;
            border-color: #d39e00;
        }

    /* Responsividad mejorada */
    @@media (max-width: 768px) {
        .page-container {
            padding: 1rem;
        }

        .header-logo {
            flex-direction: column;
            text-align: center;
            gap: 0.5rem;
        }

            .header-logo h1 {
                font-size: 1.5rem;
            }

        .logo-img {
            height: 60px;
        }

        .form-row {
            flex-direction: column;
            gap: 0;
        }

            .form-row > .form-group {
                width: 100%;
                min-width: auto;
            }

        .table-container {
            max-height: 400px;
        }

        table {
            font-size: 0.875rem;
        }

            table th, table td {
                padding: 0.5rem;
            }
    }

    @@media (max-width: 576px) {
        .modal-container {
            width: 95%;
            margin: 0.5rem auto;
        }

        .toast-container {
            width: 100%;
            max-width: none;
            padding: 0 0.5rem;
        }

        .toast {
            min-width: auto;
            width: 100%;
        }

        .btn {
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
        }
    }
</style>