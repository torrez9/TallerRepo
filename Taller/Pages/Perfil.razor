@page "/perfil"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using Taller.Models
@using System.Net.Http.Json
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Mi Perfil</PageTitle>

<div class="page-container">
    <div class="header-container">
        <div class="header-logo">
            <img src="images/logotuning.png" alt="Logo Taller" class="logo-img" />
            <h1>Mi Perfil</h1>
        </div>
    </div>

    <div class="profile-content">
        <div class="card profile-card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h3><i class="fas fa-user-circle"></i> Información Personal</h3>
                    <button class="btn btn-primary" @onclick="ToggleEditMode">
                        @(editMode ? "Cancelar" : "Editar Perfil")
                    </button>
                </div>
            </div>
            <div class="card-body">
                @if (userLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        <p class="mt-2">Cargando tu información...</p>
                    </div>
                }
                else if (clienteActual == null)
                {
                    <div class="alert alert-danger">
                        No se pudo cargar tu información. Por favor intenta recargar la página.
                        <button class="btn btn-sm btn-secondary mt-2" @onclick="CargarDatosCliente">
                            <i class="fas fa-sync-alt"></i> Recargar
                        </button>
                    </div>
                }
                else if (editMode)
                {
                    <EditForm Model="@updateRequest" OnValidSubmit="@GuardarCambios">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label>Nombre*</label>
                                <InputText @bind-Value="updateRequest.Nombre" class="form-control" />
                                <ValidationMessage For="@(() => updateRequest.Nombre)" />
                            </div>
                            <div class="form-group col-md-6">
                                <label>Apellido*</label>
                                <InputText @bind-Value="updateRequest.Apellido" class="form-control" />
                                <ValidationMessage For="@(() => updateRequest.Apellido)" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label>Teléfono</label>
                                <InputText @bind-Value="updateRequest.Telefono" class="form-control" />
                                <ValidationMessage For="@(() => updateRequest.Telefono)" />
                            </div>
                            <div class="form-group col-md-6">
                                <label>Correo Electrónico</label>
                                <InputText @bind-Value="clienteActual.Correo" class="form-control" disabled />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label>Nombre de Usuario*</label>
                                <InputText @bind-Value="updateRequest.NombreUsuario" class="form-control" />
                                <ValidationMessage For="@(() => updateRequest.NombreUsuario)" />
                            </div>
                            <div class="form-group col-md-6">
                                <label>Dirección</label>
                                <InputText @bind-Value="updateRequest.Direccion" class="form-control" />
                                <ValidationMessage For="@(() => updateRequest.Direccion)" />
                            </div>
                        </div>

                        <div class="form-actions">
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm"></span>
                                    <span> Guardando...</span>
                                }
                                else
                                {
                                    <span><i class="fas fa-save"></i> Guardar Cambios</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="profile-info">
                        <div class="info-row">
                            <span class="info-label">Nombre:</span>
                            <span class="info-value">@clienteActual.Nombre</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Apellido:</span>
                            <span class="info-value">@clienteActual.Apellido</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Teléfono:</span>
                            <span class="info-value">@clienteActual.Telefono</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Correo:</span>
                            <span class="info-value">@clienteActual.Correo</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Usuario:</span>
                            <span class="info-value">@clienteActual.Usuario</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Dirección:</span>
                            <span class="info-value">@clienteActual.Direccion</span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="card password-card">
            <div class="card-header">
                <h3><i class="fas fa-lock"></i> Cambiar Contraseña</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@cambioContraseña" OnValidSubmit="@CambiarContraseña">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-row">
                        <div class="form-group col-md-4">
                            <label>Contraseña Actual*</label>
                            <InputText type="password" @bind-Value="cambioContraseña.ContraseñaActual" class="form-control" />
                            <ValidationMessage For="@(() => cambioContraseña.ContraseñaActual)" />
                        </div>
                        <div class="form-group col-md-4">
                            <label>Nueva Contraseña*</label>
                            <InputText type="password" @bind-Value="cambioContraseña.NuevaContraseña" class="form-control" />
                            <ValidationMessage For="@(() => cambioContraseña.NuevaContraseña)" />
                        </div>
                        <div class="form-group col-md-4">
                            <label>Confirmar Contraseña*</label>
                            <InputText type="password" @bind-Value="cambioContraseña.ConfirmarContraseña" class="form-control" />
                            <ValidationMessage For="@(() => cambioContraseña.ConfirmarContraseña)" />
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary" disabled="@isChangingPassword">
                            @if (isChangingPassword)
                            {
                                <span class="spinner-border spinner-border-sm"></span>
                                <span> Cambiando...</span>
                            }
                            else
                            {
                                <span><i class="fas fa-key"></i> Cambiar Contraseña</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Notificación Toast -->
@if (mostrarNotificacion)
{
    <div class="toast-container">
        <div class="toast show @(notificacionExito ? "toast-success" : "toast-error")">
            <div class="toast-header">
                <strong>@(notificacionExito ? "Éxito" : "Error")</strong>
                <button type="button" class="btn-close" @onclick="CerrarNotificacion">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="toast-body">
                @mensajeNotificacion
            </div>
        </div>
    </div>
}

@code {
    private Cliente clienteActual = null;
    private UpdateProfileRequest updateRequest = new();
    private ChangePasswordRequest cambioContraseña = new();
    private bool editMode = false;
    private bool isSaving = false;
    private bool isChangingPassword = false;
    private bool userLoading = true;
    private string mensajeNotificacion = string.Empty;
    private bool mostrarNotificacion = false;
    private bool notificacionExito = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosCliente();
    }

    private async Task CargarDatosCliente()
    {
        userLoading = true;
        StateHasChanged();

        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                if (!string.IsNullOrEmpty(userId))
                {
                    var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");

                    if (!string.IsNullOrEmpty(token))
                    {
                        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

                        var response = await Http.GetAsync($"api/Profile/me");

                        if (response.IsSuccessStatusCode)
                        {
                            clienteActual = await response.Content.ReadFromJsonAsync<Cliente>();
                            updateRequest = new UpdateProfileRequest
                            {
                                Nombre = clienteActual.Nombre,
                                Apellido = clienteActual.Apellido,
                                Telefono = clienteActual.Telefono,
                                NombreUsuario = clienteActual.Usuario,
                                Direccion = clienteActual.Direccion
                            };
                        }
                        else
                        {
                            MostrarNotificacion("Error al cargar datos del perfil", false);
                        }
                    }
                    else
                    {
                        Navigation.NavigateTo("/login");
                    }
                }
            }
            else
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar perfil: {ex.Message}");
            MostrarNotificacion("Error al cargar datos del perfil", false);
        }
        finally
        {
            userLoading = false;
            StateHasChanged();
        }
    }

    private void ToggleEditMode()
    {
        editMode = !editMode;
        if (editMode)
        {
            updateRequest = new UpdateProfileRequest
            {
                Nombre = clienteActual.Nombre,
                Apellido = clienteActual.Apellido,
                Telefono = clienteActual.Telefono,
                NombreUsuario = clienteActual.Usuario,
                Direccion = clienteActual.Direccion
            };
        }
    }

    private async Task GuardarCambios()
    {
        isSaving = true;
        StateHasChanged();

        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PutAsJsonAsync("api/Profile/update", updateRequest);

            if (response.IsSuccessStatusCode)
            {
                clienteActual.Nombre = updateRequest.Nombre ?? clienteActual.Nombre;
                clienteActual.Apellido = updateRequest.Apellido ?? clienteActual.Apellido;
                clienteActual.Telefono = updateRequest.Telefono ?? clienteActual.Telefono;
                clienteActual.Usuario = updateRequest.NombreUsuario ?? clienteActual.Usuario;
                clienteActual.Direccion = updateRequest.Direccion ?? clienteActual.Direccion;

                MostrarNotificacion("Perfil actualizado correctamente", true);
                editMode = false;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                MostrarNotificacion($"Error al actualizar: {error}", false);
            }
        }
        catch (Exception ex)
        {
            MostrarNotificacion($"Error: {ex.Message}", false);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task CambiarContraseña()
    {
        isChangingPassword = true;
        StateHasChanged();

        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PostAsJsonAsync("api/Profile/change-password", cambioContraseña);

            if (response.IsSuccessStatusCode)
            {
                MostrarNotificacion("Contraseña cambiada exitosamente", true);
                cambioContraseña = new ChangePasswordRequest();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                MostrarNotificacion($"Error: {error}", false);
            }
        }
        catch (Exception ex)
        {
            MostrarNotificacion($"Error: {ex.Message}", false);
        }
        finally
        {
            isChangingPassword = false;
            StateHasChanged();
        }
    }

    private void MostrarNotificacion(string mensaje, bool exito)
    {
        mensajeNotificacion = mensaje;
        notificacionExito = exito;
        mostrarNotificacion = true;
        StateHasChanged();

        Task.Run(async () =>
        {
            await Task.Delay(4000);
            if (mostrarNotificacion)
            {
                await InvokeAsync(() =>
                {
                    mostrarNotificacion = false;
                    StateHasChanged();
                });
            }
        });
    }

    private void CerrarNotificacion()
    {
        mostrarNotificacion = false;
        StateHasChanged();
    }

    public class UpdateProfileRequest
    {
        [Required(ErrorMessage = "El nombre es requerido")]
        [MinLength(2, ErrorMessage = "El nombre debe tener al menos 2 caracteres")]
        public string? Nombre { get; set; }

        [Required(ErrorMessage = "El apellido es requerido")]
        [MinLength(2, ErrorMessage = "El apellido debe tener al menos 2 caracteres")]
        public string? Apellido { get; set; }

        [Phone(ErrorMessage = "Teléfono no válido")]
        public string? Telefono { get; set; }

        [Required(ErrorMessage = "El nombre de usuario es requerido")]
        [MinLength(4, ErrorMessage = "El nombre de usuario debe tener al menos 4 caracteres")]
        public string? NombreUsuario { get; set; }

        public string? Direccion { get; set; }
    }

    public class ChangePasswordRequest
    {
        [Required(ErrorMessage = "La contraseña actual es requerida")]
        public string ContraseñaActual { get; set; }

        [Required(ErrorMessage = "La nueva contraseña es requerida")]
        [MinLength(6, ErrorMessage = "Mínimo 6 caracteres")]
        public string NuevaContraseña { get; set; }

        [Required(ErrorMessage = "Confirme la nueva contraseña")]
        [Compare(nameof(NuevaContraseña), ErrorMessage = "Las contraseñas no coinciden")]
        public string ConfirmarContraseña { get; set; }
    }
}

<style>
    /* Estilos base consistentes con las otras páginas */
    :root {
        --primary-color: #6f42c1;
        --secondary-color: #5a32a8;
        --success-color: #28a745;
        --danger-color: #dc3545;
        --warning-color: #ffc107;
        --info-color: #17a2b8;
        --light-color: #f8f9fa;
        --dark-color: #343a40;
        --border-radius: 0.375rem;
        --box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        line-height: 1.6;
        color: #212529;
        background-color: #f8f9fa;
    }

    .page-container {
        padding: 2rem;
        min-height: 100vh;
    }

    .header-container {
        margin-bottom: 2rem;
    }

    .header-logo {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
    }

        .header-logo h1 {
            margin: 0;
            color: var(--primary-color);
            font-size: 2rem;
            font-weight: 600;
        }

    .logo-img {
        height: 80px;
        width: auto;
        object-fit: contain;
    }

    .profile-content {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }

    @@media (min-width: 992px) {
        .profile-content {
            grid-template-columns: 1fr 1fr;
        }
    }

    /* Tarjetas */
    .card {
        border: none;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        overflow: hidden;
        background-color: white;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 1rem 1.5rem rgba(0, 0, 0, 0.1);
        }

    .card-header {
        background-color: var(--primary-color);
        color: white;
        padding: 1rem 1.5rem;
    }

        .card-header h3 {
            margin: 0;
            font-size: 1.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .card-body {
        padding: 1.5rem;
    }

    /* Formularios */
    .form-group {
        margin-bottom: 1.25rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #495057;
    }

    .form-control {
        display: block;
        width: 100%;
        padding: 0.5rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: var(--border-radius);
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .form-control:focus {
            color: #495057;
            background-color: #fff;
            border-color: var(--primary-color);
            outline: 0;
            box-shadow: 0 0 0 0.25rem rgba(111, 66, 193, 0.25);
        }

    .form-select {
        display: block;
        width: 100%;
        padding: 0.5rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: var(--border-radius);
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .form-select:focus {
            border-color: var(--primary-color);
            outline: 0;
            box-shadow: 0 0 0 0.25rem rgba(111, 66, 193, 0.25);
        }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
    }

        .form-row > .form-group {
            flex: 1;
            min-width: 200px;
        }

    .form-actions {
        margin-top: 1.5rem;
        text-align: right;
    }

    /* Información del perfil */
    .profile-info {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .info-row {
        display: flex;
        padding: 0.75rem;
        background-color: #f8f9fa;
        border-radius: var(--border-radius);
    }

    .info-label {
        font-weight: 600;
        min-width: 120px;
        color: var(--dark-color);
    }

    .info-value {
        color: #495057;
    }

    /* Botones */
    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        font-weight: 400;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        user-select: none;
        border: 1px solid transparent;
        padding: 0.5rem 1rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: var(--border-radius);
        transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        cursor: pointer;
    }

    .btn-primary {
        color: #fff;
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }

        .btn-primary:hover {
            background-color: var(--secondary-color);
            border-color: var(--secondary-color);
        }

    .btn-secondary {
        color: #fff;
        background-color: #6c757d;
        border-color: #6c757d;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
            border-color: #545b62;
        }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    /* Alertas */
    .alert {
        position: relative;
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: var(--border-radius);
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    /* Spinner */
    .spinner-border {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        vertical-align: -0.125em;
        border: 0.2em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    @@keyframes spinner-border {
        to {
            transform: rotate(360deg);
        }
    }

    /* Toast */
    .toast-container {
        position: fixed;
        bottom: 1rem;
        right: 1rem;
        z-index: 1100;
    }

    .toast {
        display: flex;
        flex-direction: column;
        min-width: 300px;
        background-color: white;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        overflow: hidden;
        margin-bottom: 1rem;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .toast.show {
            opacity: 1;
        }

    .toast-success .toast-header {
        background-color: var(--success-color);
        color: white;
    }

    .toast-error .toast-header {
        background-color: var(--danger-color);
        color: white;
    }

    .toast-header {
        padding: 0.75rem 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .toast-header strong {
            font-weight: 600;
        }

    .toast-body {
        padding: 1rem;
    }

    /* Utilidades */
    .text-center {
        text-align: center;
    }

    .py-5 {
        padding-top: 3rem !important;
        padding-bottom: 3rem !important;
    }

    .mt-2 {
        margin-top: 0.5rem !important;
    }

    .d-flex {
        display: flex !important;
    }

    .justify-content-between {
        justify-content: space-between !important;
    }

    .align-items-center {
        align-items: center !important;
    }

    /* Validación */
    .validation-message {
        color: var(--danger-color);
        font-size: 0.875rem;
    }

    .validation-summary {
        color: var(--danger-color);
        background-color: #f8d7da;
        border-radius: var(--border-radius);
        padding: 1rem;
        margin-bottom: 1rem;
    }

    /* Responsividad */
    @@media (max-width: 768px) {
        .page-container {
            padding: 1rem;
        }

        .header-logo h1 {
            font-size: 1.5rem;
        }

        .logo-img {
            height: 60px;
        }

        .profile-content {
            grid-template-columns: 1fr;
        }

        .form-row {
            flex-direction: column;
            gap: 0;
        }

            .form-row > .form-group {
                width: 100%;
            }

        .info-row {
            flex-direction: column;
            gap: 0.25rem;
        }

        .info-label {
            min-width: auto;
        }
    }
</style>